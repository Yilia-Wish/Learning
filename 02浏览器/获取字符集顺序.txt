
最直接的方式为通过 HTTP 协议（[RFC2616], 3.4 及 14.17） "Content-Type" 头字段的 "charset" 将文档的字符编码告诉用户端。例如以下 HTTP 头声明了字符编码为 ISO-8859-1：

Content-Type: text/html; charset=ISO-8859-1
处于某种情况无法访问服务器时，HTML 文档可以包含有关文档的字符编码的明确信息，META 元素可以用来为用户端提供这些信息。例如指定当前文档的字符编码为 ISO-8859-1，文档中应包含如下 META 声明：

<META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
当 HTTP 协议与 META 元素均没有提供有关一个文档的字符编码信息时，HTML 还为一些元素提供了 charset 属性。结合这些机制，作者可以在很大程度上提高当用户获取资源时用户端识别字符编码的机会。

针对如何确定一个文档的字符编码，用户代码必须遵守下面的优先级顺序（优先级由高至低）：

HTTP "Content-Type" 字段中的 "charset" 参数。
META 声明中 "http-equiv" 为 "Content-Type" 对应的值中的 "charset" 的值。
元素的 charset 属性。
关于 字符编码 的详细信息，请参考 HTML4.01 规范 5.2 Character encodings 以及 W3C Internationalization 关于 Character encodings 中的内容。






首先，对于动态页面必须确保 HTTP "Content-Type" 头字段的 "charset" 参数与页面自身编码相符，且务必在页面的 META 元素中也声明相符的字符编码信息。对于静态页面，必须保证页面中 META 元素声明中 "http-equiv" 为 "Content-Type" 对应的值中的 "charset" 的值与页面自身编码相符。
其次，在设置字符编码别名时，最好使用最通用的、各浏览器均可识别的编码别名。