1.$digest与$apply的关系：
  在Angular中，$digest是通过$scope.$apply()方法自动调用$rootScope.$digest()。在整个运行机制中，$digest是会循环调用的。$apply()在无法关联到上下文的变动时手动调用，用以改变视图内被绑定的值。例如setTimeout()对于模型的更改，Angular无法监听到其对于模型的更改，故要用$apply来触发$digest并作出视图上的更改。（建议使用$timeout以自动调用$apply）
参考文献：http://blog.csdn.net/dm_vincent/article/details/38705099#comments
英文原文：
https://www.sitepoint.com/understanding-angulars-apply-digest/、


基础概念：

2、客户端模板：于后端区别是
  后端语言在后台将数据和模板拼接好以后发送到浏览器
  客户端模板是将数据和模板发送到浏览器中进行装配

3、控制器
 AngularJS应用主要依赖于控制器来控制数据在应用程序中的流动。主要用于封装业务逻辑。模型数据被存放在对象的属性中。


4、依赖注入
  只需要获取需要的东西，不必要创建所依赖的东西。

5、关于表达式
  通过$parse服务解析表达式；创建的变量属于$scope对象（js属于window对象）；不能进行条件循环以及判断，抛出异常等等。

6、ng-bind指令：用于防止出现不需要出现的Angular表达式。


7、Angular知道变量变化的途径：
  第一种是固定接口改变变量的值，例如set（），在set调用时即可知道，缺点写法繁琐。
  第二种是脏检查，对元对象存一份快照，在一定时间段内对其进行比对，进行变化，缺点有性能问题。


  此处不回对所有对象所有属性进行脏检查，只会检查绑定到HTML中的对象属性。（将被绑定的属性对象添加到watcher，ng开头的事件触发后就会进行脏检查）
参照第一条。$apply无参数会检查所有$scope的属性。$apply不会直接调用$digest,中间还有一层$eval来进行异常处理。

8、$watch用法：用于监听对象某个属性，作出相应的处理。

9、一个页面内不能注册多个app模块，控制器一般放在相应模块的控制器方法内以变成非全局控制器。

10、依赖注入：$provide中有三种方式：service/factory/provider;provider方式创建服务时，必须要有$get方法，告诉其他部分如何使用这个服务，可以将返回的对象作为参数使用；可返回任意类型数据。factory也是可以返回任意类型数据，但是service只能返回对象类型数据。在provider中可以定义一些方法，并在初始化时进行调用，对某些属性或值进行初始化设置。
参考文献：
http://blog.csdn.net/ywl570717586/article/details/51306176
注意：视频中和某些博客中所讲不对，不可参照。

11、多个控制器共享数据：不能简单定义多个控制器并直接使用$scope的相应属性，应当将其封装成为一个对象，使其成为引用类型数据才可以共享数据。更好的方法是使用factory进行返回，在相应的控制器内直接调用。

12、过滤器：用于数据格式化或者数据筛选。重要的是filter这个过滤器，匹配子串。key值无法进行匹配。orderBy是通过key值进行排序。正序是正常写法，反序是加上负号。在引号里面。
 若要在其他地方使用（如控制器内，是调用$filter 方法）
 自定义方法：在控制器内自己写方法进行过滤。
 还有依赖注入的方法可以使用，在模块创建的参数中注入$filterProvider，注意：一定要在注册函数内部返回一个函数才可以实现其调用。$controllerProvider也需要在依赖注入后的函数中进行注册。使用register方法进行注册。

13、ng-class可以绑定多个类的判断，通过分号隔开。

14、依赖注入的内容字符串若经过压缩混淆会报错，故建议写在数组内，数组最后一个内容是相应函数。显式注入是在数组内写出注入内容。隐式注入是指前面已经写过了factory等服务，在控制器内直接使用它（非数组形式）；也可以使用$inject进行注入。

15、内置指令集：init，（初始化，其数据有$index/$first等属性）内置事件指令好处：自动触发脏检查。

16、自定义指令：
重点注意：名字，HTML中使用分隔法书写，在js中使用驼峰式写法
(需要在参数中注入$complieProvider)
restrict：使用方式（兼容ie8建议用属性）
template：一定要有最外层标签包裹（经测试，只能有一个根节点！！）
templateUrl：使
用变量名时是对当前HTML中的script标签通过id进行绑定.
transclude属性：表示是否将原始数据保留，为true时保留，需要在模板中写一个带有ng-transclude属性的标签来放置原始数据。
priority：优先级，数字越大优先执行（ng-repeat为1000）
terminal：表示是否当前优先级的指令为最后的部分。若为true，低于此优先级的都将不在执行。
指令编译执行过程：生成标准dom标签；按照优先级运行各个指令中的compile方法；运行link方法（进行scope和事件绑定）
compile中可以对dom进行改变，link主要用于绑定！
controller:与总的controller类似，单可以有单独作用域，也可以单独命名，使用controllerAs方法。
controllerAs一般用于多指令间通信，和require属性一起使用。被调用的要有controllerAs值，调用者要有require值。若被调用者在调用者之前，需要加上^符号来往前调用。
scope属性值为true时，继承自父controller，但是不同作用域；
false继承自父亲，作用域也相同，默认为false。若是object类型参数，也是独立作用域，则有三种：第一种，前缀&符号，表示封装为函数，调用时要像函数调用一样使用。例如a：&parentName，在HTML中要写parent-name=‘name’（name是父controller里的值）。第二种，=符号，是表示双向绑定，一方有变化，另一方也会变化。第三种是@符号，只能绑定简单数据类型的值，不能绑定对象。并且是单向绑定，从父亲到子。
参考文献：http://blog.csdn.net/VitaLemon__/article/details/52213103

`17、constant方法可以注入任何服务；value只能注入factory或service、controller等；run里面直接是一个函数。在加载完以后（config之后）用，在用户操作前。
18 、表单的验证一般都在myForm.$invalid中，另外需要注意验证是否发生过改动。复选框的验证需要注意:若接收数值为数组形式，验证数组长度；若为对象形式，验证是否改动。
19、自定义验证表单是通过自定义指令操作的，其require值为ng-model。在link中自定义时引入ngmodelcontroller，并且对相应方法进行重写。